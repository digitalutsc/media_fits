<?php

/**
 * @file
 * Contains fits.module.
 */

use Drupal\Component\Render\FormattableMarkup;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\media\Entity\Media;
use Drupal\file\Entity\File;

/**
 * Implements hook_help().
 */
function media_fits_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the islandora_lite_fits module.
    case 'help.page.islandora_lite_media_fits':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module represent DSU&#039;&#039;s approach toward Fits in our Islandora Lite Stack') . '</p>';

      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function media_fits_theme() {
  return [
    'islandora_lite_media_fits' => [
      'render element' => 'children',
    ],
  ];
}

/**
 * Implement media_fits_media_insert().
 */
function media_fits_media_insert(EntityInterface $entity) {
  // Only extract Fits for File level only.
  if ('Media' === $entity->getEntityType()->getLabel()->getUntranslatedString() 
      && 1 === \Drupal::config('media_fits.fitsconfig')->get('fits-extract-ingesting')) {
    execute_media_fits_action($entity);
  }
}

/**
 * Implement media_fits_media_update().
 */
function media_fits_media_update(EntityInterface $entity) {
  // Only extract Fits for File level only.
  if ('Media' === $entity->getEntityType()->getLabel()->getUntranslatedString() 
      && 1 === \Drupal::config('media_fits.fitsconfig')->get('fits-extract-ingesting')) {
    
    $media = Media::load($entity->id()); 
    $source_field_name = $media->getSource()->getConfiguration()['source_field'];

    $current_file_id = $media->get($source_field_name)->target_id;
    $previous_revision_id = $media->getRevisionId() - 1;
    $previous_revision = \Drupal::entityTypeManager()->getStorage('media')->loadRevision($previous_revision_id);

    if (isset($source_field_name) && $previous_revision->hasField($source_field_name)) {
      $previous_file_id = $previous_revision->get($source_field_name)->target_id;
    } else {
      $previous_file_id = null; // or any other default value or action
    }
      
    if ($current_file_id !== $previous_file_id) {
      // A new file ID was generated.
      execute_media_fits_action($entity);
    } 
  }
}

/**
 * Shared function call for execute Fits Action.
 */
function execute_media_fits_action(EntityInterface $entity) {
  // Fix warning when Config form hasn't been setup.
  $config = \Drupal::config('media_fits.fitsconfig');
  if (!isset($config) || empty($config->get('fits-advancedqueue_id'))) {
    return;
  }
  $media = Media::load($entity->id()); 
  $utils = \Drupal::service('media_fits.context_utils');
  $utils->executeFileReactions('\Drupal\media_fits\Plugin\ContextReaction\MediaFitsReaction', $media);
}

if (!function_exists('print_log')) {

  /**
   * Debug function: display any variable to error log.
   */
  function print_log($thing) {
    error_log(print_r($thing, TRUE), 0);
  }

}

if (!function_exists('logging')) {

  /**
   * Debug function: display any variable to current webpage.
   */
  function logging($thing) {
    echo '<pre>';
    print_r($thing);
    echo '</pre>';
  }

}

if (!function_exists('drupal_log')) {

  /**
   * Debug function: display any variable to drupal Reports Log messages.
   */
  function drupal_log($msg) {
    \Drupal::logger(basename(__FILE__, '.module'))->error($msg);
  }

}
