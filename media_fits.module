<?php

/**
 * @file
 * Contains fits.module.
 */

use Drupal\Component\Render\FormattableMarkup;
use Drupal\Core\Form\FormStateInterface;
use Drupal\file\Entity\File;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function media_fits_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the islandora_lite_fits module.
    case 'help.page.islandora_lite_fits':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module represent DSU&#039;&#039;s approach toward Fits in our Islandora Lite Stack') . '</p>';

      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function media_fits_theme() {
  return [
    'islandora_lite_fits' => [
      'render element' => 'children',
    ],
  ];
}

/**
 * Implement media_fits_file_insert().
 */
function media_fits_file_insert(EntityInterface $entity) {
  // Only extract Fits for File level only.
  if ('File' === $entity->getEntityType()->getLabel()->getUntranslatedString() && 1 === \Drupal::config('fits.fitsconfig')->get('fits-extract-ingesting')) {
    execute_media_fits_action($entity);
  }
}

/**
 * Shared function call for execute Fits Action.
 */
function execute_media_fits_action(EntityInterface $entity) {
  // Fix warning when Config form hasn't been setup.
  $config = \Drupal::config('fits.fitsconfig');
  if (!isset($config) || empty($config->get('fits-advancedqueue_id'))) {
    return;
  }
  $file = File::load($entity->id());
  $utils = \Drupal::service('fits.context_utils');
  $utils->executeFileReactions('\Drupal\fits\Plugin\ContextReaction\FitsReaction', $file);
}

/**
 * Implement media_fits_form_alter().
 */
function media_fits_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (start_with($form_id, 'file_') && end_with($form_id, '_edit_form')) {
    $form['fits'] = [
      '#type' => 'details',
      '#title' => 'Fits',
      '#open' => TRUE,
    ];
    global $base_url;
    $form['fits']['description'] = [
      '#markup' => new FormattableMarkup("<p>The following fields are generated by Fits tool. To update them, run the action <i>FITS - Generate and Extract Technical metadata for File</i> at <a href=\"$base_url/admin/content/files\">$base_url/admin/content/files</a></p>", []),
    ];
    foreach (array_keys($form) as $field) {
      if (FALSE !== strpos($field, '_fits') || FALSE !== strpos($field, '_media_fits_')) {
        $form['fits'][$field] = $form[$field];
        if ('field_media_fits_pronom_puid' === $field) {
          $form['fits'][$field]['widget'][0]['target_id']['#attributes']['disabled'] = TRUE;
        }
        else {
          $form['fits'][$field]['widget'][0]['value']['#attributes']['readonly'] = 'readonly';
        }

        unset($form[$field]);
      }
    }
  }
}

/**
 * Check if string start with sub-string.
 */
function start_with($haystack, $needle): bool {
  $length = strlen($needle);

  return substr($haystack, 0, $length) === $needle;
}

/**
 * Check if string end with sub-string https://stackoverflow.com/questions/834303/startswith-and-endswith-functions-in-php.
 */
function end_with($haystack, $needle): bool {
  $length = strlen($needle);
  if (!$length) {
    return TRUE;
  }

  return substr($haystack, -$length) === $needle;
}

/**
 * Modify the Help text field to repurpose its use to contain Jmespath.
 */
function media_fits_form_field_config_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Get all available file types.
  $fileTypes = \Drupal::entityTypeManager()
    ->getStorage('file_type')
    ->loadMultiple();
  $fileTypes = array_keys($fileTypes);

  // Get a need key component to detect fits related fields.
  $parts = explode('/', \Drupal::service('path.current')->getPath());
  $currentFileEntity = $parts[5];
  $field = $parts[count($parts) - 1];

  // Limit JmesPath field modification for Fits related.
  if (in_array($currentFileEntity, $fileTypes) && FALSE !== strpos($field, '_media_fits_')) {
    $form['description']['#description'] = $form['description']['#description'] . t("
    <p><u></i><strong>Important Note:</strong></u> With the Fits module enabled, the Helper text can evaluate JMespath(s) against Fits JSON field to extract technical meatadata.
    <br /><strong>Mandatory convention:</strong> <code>[{JmesPath}]</code>. For example. <code>[{fileinfo.md5checksum}]</code>. For multiple, enter them each line.
    <br />For further details about JMESPath, please visit: <a href='https://jmespath.org/tutorial.html' target='_blank'>https://jmespath.org/tutorial.html</a> </p>");
  }
}

/**
 * Leave a note for use case.
 */
function media_fits_form_field_ui_field_storage_add_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Get all available file types.
  $fileTypes = \Drupal::entityTypeManager()
    ->getStorage('file_type')
    ->loadMultiple();
  $fileTypes = array_keys($fileTypes);

  // Get a need key component to detect fits related fields.
  $parts = explode('/', \Drupal::service('path.current')->getPath());
  $currentFileEntity = $parts[5];

  if (in_array($currentFileEntity, $fileTypes)) {
    $form['note-for-fits'] = [
      '#markup' => t('<strong>Important Note</strong>: If you are adding textfield(s) for Fits extraction with JMESPath, please make sure to have
        <code>_media_fits_</code> in the field\'s machine name (ie. <cdoe>field_media_fits_file_size</cdoe>)'),
    ];
  }
}

if (!function_exists('print_log')) {

  /**
   * Debug function: display any variable to error log.
   */
  function print_log($thing) {
    error_log(print_r($thing, TRUE), 0);
  }

}

if (!function_exists('logging')) {

  /**
   * Debug function: display any variable to current webpage.
   */
  function logging($thing) {
    echo '<pre>';
    print_r($thing);
    echo '</pre>';
  }

}

if (!function_exists('drupal_log')) {

  /**
   * Debug function: display any variable to drupal Reports Log messages.
   */
  function drupal_log($msg) {
    \Drupal::logger(basename(__FILE__, '.module'))->error($msg);
  }

}
